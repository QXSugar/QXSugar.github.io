<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>弎柒-blog</title>
  
  <subtitle>Brevity is beauty</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qxsugar.github.io/"/>
  <updated>2020-05-15T03:46:13.456Z</updated>
  <id>https://qxsugar.github.io/</id>
  
  <author>
    <name>弎柒</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建hadoop</title>
    <link href="https://qxsugar.github.io/2020/05/14/warehouse/%E6%90%AD%E5%BB%BAHadoop/"/>
    <id>https://qxsugar.github.io/2020/05/14/warehouse/搭建Hadoop/</id>
    <published>2020-05-14T02:07:24.000Z</published>
    <updated>2020-05-15T03:46:13.456Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍如何在单机搭建一个hadoop系统</p><a id="more"></a><h3 id="step1-前言"><a href="#step1-前言" class="headerlink" title="step1 前言"></a>step1 前言</h3><p>hadoop 可以理解为分布式存储仓库，通过分布存储支撑大量数据<br>这里不做过多的介绍，具体可以了解<a href="https://hadoop.apache.org/" target="_blank" rel="noopener">官网</a></p><h3 id="step2-环境需求"><a href="#step2-环境需求" class="headerlink" title="step2 环境需求"></a>step2 环境需求</h3><ol><li>java8</li><li>unar 很香的解压工具</li></ol><h3 id="step3-下载"><a href="#step3-下载" class="headerlink" title="step3 下载"></a>step3 下载</h3><p><a href="http://apache.claz.org/hadoop/" target="_blank" rel="noopener">hadoop官网下载地址</a><br>选择自己需要的版本，这里我选择2.10版本，不同版本也许会有些差异，但是问题都不大<br>这里我选择部署目录<code>/root/warehouse</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.10.0/hadoop-2.10.0.tar.gz</span><br></pre></td></tr></table></figure><p>下载完成之后解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unar hadoop-2.10.0.tar.gz</span><br><span class="line">mv hadoop-2.10.0 hadoop</span><br></pre></td></tr></table></figure><h3 id="step4-配置"><a href="#step4-配置" class="headerlink" title="step4 配置"></a>step4 配置</h3><p>进入<code>hadoop/etc/hadoop</code>修改相关配置文件</p><ol><li><p>配置<code>core-site.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--这是hadoop临时目录，hadoop临时产生的文件都在这里--&gt;</span><br><span class="line">&lt;!--默认是/tmp/hadoo-hadoop，系统重启会丢失，所以最好指定这个目录--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;file:root/warehouse/hadoop/tmp&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;!--hadoop服务的端口, 这里地址用localhost--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置<code>hdfs-site.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--复制副本，单机模式我们写1就行了--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--不是root用户也可以写文件到hdfs--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--namenode服务的目录--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/root/warehouse/hadoop/data/name&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--hadoop的数据目录--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/root/warehouse/hadoop/data/data&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>配置<code>mapred-site.xml</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>配置<code>hadoop-env.sh</code>，不是必要的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=替换成本机JAVA_HOME</span><br></pre></td></tr></table></figure></li><li><p>修改houst 增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 hadoop-alone</span><br></pre></td></tr></table></figure></li><li><p>修改etc/hadoop/slave</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop-alone</span><br></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop namenode -format</span><br></pre></td></tr></table></figure></li></ol><h3 id="step5-启动测试"><a href="#step5-启动测试" class="headerlink" title="step5 启动测试"></a>step5 启动测试</h3><ol><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/start-all.sh</span><br></pre></td></tr></table></figure></li><li><p>测试<br>上传一个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop fs -put README.txt /README.txt</span><br></pre></td></tr></table></figure></li><li><p>查看文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop fs -cat /README.txt</span><br></pre></td></tr></table></figure></li></ol><h3 id="step6-总结"><a href="#step6-总结" class="headerlink" title="step6 总结"></a>step6 总结</h3><p>在搭建过程中出现了几次错误</p><ol><li>fs.defaultFS的value一定要改，不然要配置hosts</li><li>format之后再启动服务,不然会出现client连不上的问题</li></ol><p>其他没有发现大问题，搭建过程还算顺利</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介绍如何在单机搭建一个hadoop系统&lt;/p&gt;
    
    </summary>
    
      <category term="warehouse" scheme="https://qxsugar.github.io/categories/warehouse/"/>
    
    
      <category term="warehouse" scheme="https://qxsugar.github.io/tags/warehouse/"/>
    
      <category term="hadoop" scheme="https://qxsugar.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>搭建一套Warehouse</title>
    <link href="https://qxsugar.github.io/2020/05/14/warehouse/%E6%90%AD%E5%BB%BAwarehouse/"/>
    <id>https://qxsugar.github.io/2020/05/14/warehouse/搭建warehouse/</id>
    <published>2020-05-14T01:40:06.000Z</published>
    <updated>2020-05-14T10:07:01.999Z</updated>
    
    <content type="html"><![CDATA[<p>现在很多第三方平台已经实现了数据仓库。<br>但是如果一开始就用人家搭建好的工具，那么自己的能力是不会得到成长的。<br>所以决定自己搭建一套单机系统来实践一下。</p><a id="more"></a><h3 id="step1-数据仓库是什么"><a href="#step1-数据仓库是什么" class="headerlink" title="step1 数据仓库是什么"></a>step1 数据仓库是什么</h3><pre><code>数据仓库和数据库是有区别的数据仓库主要用来做OLAP用的</code></pre><p><a href="https://www.zhihu.com/question/20623931" target="_blank" rel="noopener">更多区别</a></p><h3 id="step2-数据仓库架构"><a href="#step2-数据仓库架构" class="headerlink" title="step2 数据仓库架构"></a>step2 数据仓库架构</h3><p><img src="/images/warehouse-framework.png" alt="数据仓库架构"></p><h3 id="step3-依赖组件"><a href="#step3-依赖组件" class="headerlink" title="step3 依赖组件"></a>step3 依赖组件</h3><ol><li>hadoop 用来做分布式存储</li><li>hive 用来读取hadoop的hdfs并转换成hsql可查询</li><li>presto 用来调度查询，分布式查询，联表join</li><li>sqoop 用来导入数据源到hadoop</li><li>redash 用来做BI数据展示</li></ol><h3 id="step4-配置依赖"><a href="#step4-配置依赖" class="headerlink" title="step4 配置依赖"></a>step4 配置依赖</h3><p>由于hadoop等都是大型软件，比较吃配置，由于没有集群，所以找了个大机器来搭建。</p><p>配置如下<br><img src="/images/big-machine.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在很多第三方平台已经实现了数据仓库。&lt;br&gt;但是如果一开始就用人家搭建好的工具，那么自己的能力是不会得到成长的。&lt;br&gt;所以决定自己搭建一套单机系统来实践一下。&lt;/p&gt;
    
    </summary>
    
      <category term="warehouse" scheme="https://qxsugar.github.io/categories/warehouse/"/>
    
    
      <category term="warehouse" scheme="https://qxsugar.github.io/tags/warehouse/"/>
    
  </entry>
  
  <entry>
    <title>mysql查询命中率查询脚本</title>
    <link href="https://qxsugar.github.io/2019/08/27/mysql/mysql%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%B8%AD%E7%8E%87%E6%9F%A5%E8%AF%A2%E8%84%9A%E6%9C%AC/"/>
    <id>https://qxsugar.github.io/2019/08/27/mysql/mysql查询命中率查询脚本/</id>
    <published>2019-08-27T06:45:26.000Z</published>
    <updated>2020-05-14T09:20:30.095Z</updated>
    
    <content type="html"><![CDATA[<p>当一个mysql的查询量很高时候，有很多种优化方案。<br>分库分表，主从分离等都是不错的选择。<br>主从分离情况下，我们怎么权衡一个DB够不够优秀呢?<br>通常我们会选择查询缓存命中率来作为读库的一个指标。</p><a id="more"></a><p>由于现在DB引擎都是Innodb居多。<br>所以下面都是以Innodb的角度来说。</p><h3 id="MySql-缓存命中率是什么"><a href="#MySql-缓存命中率是什么" class="headerlink" title="MySql 缓存命中率是什么?"></a>MySql 缓存命中率是什么?</h3><p>MySql查询读取磁盘的代价是很高的。<br>所以我们希望MySql尽可能的读取缓存。<br>缓存命中就是查询MySql的时候，直接从内存中得到结果返回。<br>计算公式 缓存命中率 = 读内存次数 / 查询总数。<br>一般来说。我们希望读库的缓存命中率达到 99.95% 以上。</p><h3 id="MySql-缓存参数配置"><a href="#MySql-缓存参数配置" class="headerlink" title="MySql 缓存参数配置"></a>MySql 缓存参数配置</h3><p>查看当前缓存配置大小</p><blockquote><p>show variables like ‘innodb_buffer_pool_size’</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-------------------------+------------+</span><br><span class="line">| Variable_name           | Value      |</span><br><span class="line">+-------------------------+------------+</span><br><span class="line">| innodb_buffer_pool_size | 6442450944 |</span><br><span class="line">+-------------------------+------------+</span><br></pre></td></tr></table></figure><p>控制台修改缓存大小</p><blockquote><p>SET GLOBAL innodb_buffer_pool_size=6442450944;</p></blockquote><p>修改缓存大小方案</p><ol><li>修改mysql配置文件并重启mysql</li><li>在mysql控制台修改配置，同时修改配置，不用重启</li></ol><p>还有其他参数我们用不到</p><h3 id="缓存命中率计算"><a href="#缓存命中率计算" class="headerlink" title="缓存命中率计算"></a>缓存命中率计算</h3><p>根据公式 缓存命中率 = 读内存次数 / 查询总数 我们很容易算出命中率<br>读内存次数 = “Innodb_buffer_pool_reads”<br>查询总次数 = “Innodb_buffer_pool_read_requests”</p><blockquote><p>show status like ‘%pool_read%’</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+---------------------------------------+-------------+</span><br><span class="line">| Variable_name                         | Value       |</span><br><span class="line">+---------------------------------------+-------------+</span><br><span class="line">| Innodb_buffer_pool_read_requests      | 42766114022 |</span><br><span class="line">| Innodb_buffer_pool_reads              | 566498466   |</span><br><span class="line">+---------------------------------------+-------------+</span><br></pre></td></tr></table></figure><p>但是这两个值是总的数量，并不是一段时间内的，参考价值不大，所以我们要取一段时间内的差值来算<br>命中率 = (第二次读内存次数 - 第一次读内存次数) / (第二次查询总数 - 第一次查询总数)</p><p>算了好多次，都是重复性的，有点繁琐，所以写了个脚本来算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"MYSQL缓存命中查询脚本"</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入 mysql 用户/root              "</span> user</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入 mysql 密码/''                "</span> pass</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入 mysql 域名/localhost         "</span> host</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入 mysql 端口/3306              "</span> port</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入       间隔/60s               "</span> slp</span><br><span class="line"></span><br><span class="line">user=<span class="variable">$&#123;user:-"root"&#125;</span></span><br><span class="line">pass=<span class="variable">$&#123;pass:-""&#125;</span></span><br><span class="line">host=<span class="variable">$&#123;host:-"localhost"&#125;</span></span><br><span class="line">port=<span class="variable">$&#123;port:-"3306"&#125;</span></span><br><span class="line">slp=<span class="variable">$&#123;slp:-"60"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"开始提取打点信息"</span></span><br><span class="line">info=`mysql -u<span class="variable">$&#123;user&#125;</span> -p<span class="variable">$&#123;pass&#125;</span> -h<span class="variable">$&#123;host&#125;</span> -P<span class="variable">$&#123;port&#125;</span> -e <span class="string">"show status"</span> 2&gt;/dev/null | egrep <span class="string">'Innodb_buffer_pool_reads|Innodb_buffer_pool_read_requests'</span> | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$&#123;info&#125;</span> == <span class="string">""</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"提取mysql配置信息失败"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -a info1 &lt;&lt;&lt; <span class="variable">$&#123;info&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第一次打点信息 请求数: <span class="variable">$&#123;info1[0]&#125;</span>, 读磁盘数: <span class="variable">$&#123;info1[1]&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"休眠<span class="variable">$&#123;slp&#125;</span>s"</span></span><br><span class="line">sleep <span class="variable">$&#123;slp&#125;</span></span><br><span class="line"></span><br><span class="line">info=`mysql -u<span class="variable">$&#123;user&#125;</span> -p<span class="variable">$&#123;pass&#125;</span> -h<span class="variable">$&#123;host&#125;</span> -P<span class="variable">$&#123;port&#125;</span> -e <span class="string">"show status"</span> 2&gt;/dev/null | egrep <span class="string">'Innodb_buffer_pool_reads|Innodb_buffer_pool_read_requests'</span> | awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="built_in">read</span> -a info2 &lt;&lt;&lt; <span class="variable">$&#123;info&#125;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$&#123;info&#125;</span> == <span class="string">""</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"提取mysql配置信息失败"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"第二次打点信息 请求数: <span class="variable">$&#123;info2[0]&#125;</span>, 读磁盘数: <span class="variable">$&#123;info2[1]&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">requests=`expr <span class="variable">$&#123;info2[0]&#125;</span> - <span class="variable">$&#123;info1[0]&#125;</span>`</span><br><span class="line">reads=`expr <span class="variable">$&#123;info2[1]&#125;</span> - <span class="variable">$&#123;info1[1]&#125;</span>`</span><br><span class="line"><span class="built_in">echo</span> | awk <span class="string">"&#123; print \"命中率:\", (<span class="variable">$requests</span>-<span class="variable">$reads</span>) / <span class="variable">$requests</span> * 100.0 &#125;"</span></span><br></pre></td></tr></table></figure><p><em>使用</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MYSQL缓存命中查询脚本</span><br><span class="line">请输入 mysql 用户/root              xxx</span><br><span class="line">请输入 mysql 密码/&apos;&apos;                xxx</span><br><span class="line">请输入 mysql 域名/localhost</span><br><span class="line">请输入 mysql 端口/3306</span><br><span class="line">请输入       间隔/60s               10</span><br><span class="line">开始提取打点信息</span><br><span class="line">第一次打点信息 请求数: 42766927561, 读磁盘数: 566510284</span><br><span class="line">休眠10s</span><br><span class="line">第二次打点信息 请求数: 42767040750, 读磁盘数: 566511295</span><br><span class="line">命中率: 99.1068</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当一个mysql的查询量很高时候，有很多种优化方案。&lt;br&gt;分库分表，主从分离等都是不错的选择。&lt;br&gt;主从分离情况下，我们怎么权衡一个DB够不够优秀呢?&lt;br&gt;通常我们会选择查询缓存命中率来作为读库的一个指标。&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://qxsugar.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://qxsugar.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql常用命令整理</title>
    <link href="https://qxsugar.github.io/2019/08/24/mysql/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>https://qxsugar.github.io/2019/08/24/mysql/mysql常用命令整理/</id>
    <published>2019-08-23T21:11:00.000Z</published>
    <updated>2020-05-14T09:21:46.435Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下最近常用的mysql语句</p><a id="more"></a><h4 id="MySql-锁全表"><a href="#MySql-锁全表" class="headerlink" title="MySql 锁全表"></a>MySql 锁全表</h4><p>一般在做迁移，要保留读时候用，会阻塞其他的写操作，不影响读</p><ol><li><p>上锁操作</p><blockquote><p>FLUSH TABLES WITH READ LOCK</p></blockquote></li><li><p>解锁操作</p><blockquote><p>UNLOCK TABLES</p></blockquote></li></ol><h4 id="MySql备份"><a href="#MySql备份" class="headerlink" title="MySql备份"></a>MySql备份</h4><ol><li><p>备份库中的表结构</p><blockquote><p>mysqldump -uxxx -pxxx -d db &gt; db_bk.sq</p></blockquote></li><li><p>备份某一张表</p><blockquote><p>mysqldump -uxxx -pxxx db tbl &gt; bk.sql</p></blockquote></li><li><p>按条件备份一张表</p><blockquote><p>mysqldump -uxxx -pxxx db tbl -w ‘id=1’ &gt; bk.sql</p></blockquote></li><li><p>恢复    </p><blockquote><p>mysql -uxxx -pxxx &lt; bk.sql</p></blockquote></li></ol><h4 id="Mysql-Rename-操作"><a href="#Mysql-Rename-操作" class="headerlink" title="Mysql Rename 操作"></a>Mysql Rename 操作</h4><ol><li><p>移动表，把表从一个库移动到另一个库</p><blockquote><p>rename table db1.tbl1 to db2.tbl2</p></blockquote></li><li><p>修改表名字</p></li></ol><blockquote><p>rename table old_name to new_name</p></blockquote><ol start="3"><li><p>替换表 t1 — t2</p><blockquote><p>rename table t1 to tmp, t2 to t1, tmp to t2;</p></blockquote></li></ol><h4 id="MySql-事务等级"><a href="#MySql-事务等级" class="headerlink" title="MySql 事务等级"></a>MySql 事务等级</h4><ol><li><p>查看当前事务等级</p><blockquote><p>select @@global.tx_isolation,@@tx_isolation;</p></blockquote></li><li><p>修改成读未提交 RU</p><blockquote><p>set [global | session] transaction isolation level read uncommitted;</p></blockquote></li><li><p>修改成读已提交 RC</p><blockquote><p>set  [global | session] transaction isolation level read committed;</p></blockquote></li><li><p>修改成可重复读</p><blockquote><p>set  [global | session] transaction isolation level repeatable read;</p></blockquote></li><li><p>修改成窜行</p><blockquote><p>set  [global | session] transaction isolation level serializable;</p></blockquote></li></ol><p>[global | session] 这个修改对当前session生效还是全局生效</p><h4 id="MySql-修改表库引擎"><a href="#MySql-修改表库引擎" class="headerlink" title="MySql 修改表库引擎"></a>MySql 修改表库引擎</h4><ol><li><p>修改成Innodb</p><blockquote><p>alter table xxx engine=innodb;</p></blockquote></li></ol><h3 id="MySql-autocommit-配置"><a href="#MySql-autocommit-配置" class="headerlink" title="MySql autocommit 配置"></a>MySql autocommit 配置</h3><ol><li><p>查看自动提交开关</p><blockquote><p>show [global | session] variables like ‘autocommit’;</p></blockquote></li><li><p>设置自动提交开关</p><blockquote><p>set [global | session] autocommit = [0 | 1]</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一下最近常用的mysql语句&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://qxsugar.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://qxsugar.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>一次Redis内存分析记录</title>
    <link href="https://qxsugar.github.io/2019/08/14/redis/%E4%B8%80%E6%AC%A1redis%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    <id>https://qxsugar.github.io/2019/08/14/redis/一次redis性能分析/</id>
    <published>2019-08-13T16:00:00.000Z</published>
    <updated>2020-05-14T09:37:51.349Z</updated>
    
    <content type="html"><![CDATA[<p>公司用的是Redis机器。<br>最近迁移了一次机房。<br>顺便用上了第三方的Redis存储。<br>然后，过了不久，redis内存就满了。</p><a id="more"></a><h3 id="step1-事情起因"><a href="#step1-事情起因" class="headerlink" title="step1 事情起因"></a>step1 事情起因</h3><p>一开始我们买了4G内存，迁移过期还好好的<br>过了几天，就慢慢的涨到了4G，然后我们又扩到了8G，<br>过几天之后，又满了，为了不影响服务，只能开到12G，<br>没想到过了一个周末，12G也快满了。<br>已经到了无法容忍的地步了，必须要分析一下内存里存的是什么了。</p><h3 id="step2-先初步分析一下是什么占了大头"><a href="#step2-先初步分析一下是什么占了大头" class="headerlink" title="step2 先初步分析一下是什么占了大头"></a>step2 先初步分析一下是什么占了大头</h3><p>我们先备份了一份rdb文件回来分析.<br>这里推荐一个开源工具<a href="https://github.com/xueqiu/rdr" target="_blank" rel="noopener">rdr</a><br>这个工具没有redis-rdb-tools那么强大，<br>但是却可以快速分析大概内容，各种类型占比，而且是可视化的<br>rdr原本的下载链接失效了。<a href="https://github.com/gohouse/rdr/releases/tag/v0.1.0" target="_blank" rel="noopener">新的下载链接</a></p><p>运行</p><blockquote><p>./rdr-amd64-v0.1-linux.bin show -p 8080 redis.rdb</p></blockquote><p>生成好之后。我们打开8080端口，就可以看到分析结果了</p><p><img src="/images/NOqC6S.png" alt></p><p>从这里可以看到，我们主要内存才用了3.5G，那么为什么12G都快满了呢，<br>后来和第三方技术交流才知道是内存碎片率太高了，都快250%了。<br>默认的内存回收机制和我们自己搭建的集群有区别。<br>导致内存一直在涨，不释放。</p><p>后面这个事情就交给运维哥哥去处理了～</p><h3 id="step3-虽然解决了内存的问题。但是还是想继续分析下redis，总感觉有人在代码里留下了秘密"><a href="#step3-虽然解决了内存的问题。但是还是想继续分析下redis，总感觉有人在代码里留下了秘密" class="headerlink" title="step3 虽然解决了内存的问题。但是还是想继续分析下redis，总感觉有人在代码里留下了秘密"></a>step3 虽然解决了内存的问题。但是还是想继续分析下redis，总感觉有人在代码里留下了秘密</h3><p>我们先装个redis-rdb-tools</p><blockquote><p>pip install rdbtools </p></blockquote><p>把rdb文件转成csv文件</p><blockquote><p>rdb -c memory redis.rdb -f redis.csv</p></blockquote><p>看一下csv的格式</p><blockquote><p>less redis.csv</p></blockquote><p>列含义如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">database 数据库</span><br><span class="line">type key类型</span><br><span class="line">key key</span><br><span class="line">size_in_bytes key的内存大小(byte)</span><br><span class="line">encoding value的存储编码形式</span><br><span class="line">num_elements key中的value的个数</span><br><span class="line">len_largest_element key中的value的长度</span><br><span class="line">expiry key过期时间</span><br></pre></td></tr></table></figure><p>我们过滤出csv里没有时间的key，放到tmp.log里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat redis.csv | awk -F <span class="string">','</span> <span class="string">'&#123; if($NF == "")&#123;print $3&#125; &#125;'</span> &gt; tmp.log</span><br></pre></td></tr></table></figure><p>然后按同种类型key排序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat tmp.log | sort | more</span><br></pre></td></tr></table></figure><p>现在可以more一下，分析一下这些不会过期的key是啥了。</p><h3 id="step4-END"><a href="#step4-END" class="headerlink" title="step4 END"></a>step4 END</h3><p>忙活了一早上。redis的事情终于可以告一段落了。<br>redis的数据是容易丢的。<br>而且里面的数据可读性也很差。有时候还是msgpack或者pickle处理过的。<br>感觉如果没有过期时间的缓存是很危险的！！！主从出问题容易丢，且长期占内容<br>线上的东西一定要规范好才行，囧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司用的是Redis机器。&lt;br&gt;最近迁移了一次机房。&lt;br&gt;顺便用上了第三方的Redis存储。&lt;br&gt;然后，过了不久，redis内存就满了。&lt;/p&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://qxsugar.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://qxsugar.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>新的开始</title>
    <link href="https://qxsugar.github.io/2018/09/21/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>https://qxsugar.github.io/2018/09/21/新的开始/</id>
    <published>2018-09-21T03:05:54.000Z</published>
    <updated>2020-05-14T09:34:57.600Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下自己的学习成长路线</p><a id="more"></a><h3 id="加油～"><a href="#加油～" class="headerlink" title="加油～"></a>加油～</h3><p><img src="/images/5UAGvJ.jpg" alt></p><h3 id="天道酬勤-总有一天会蜕变的"><a href="#天道酬勤-总有一天会蜕变的" class="headerlink" title="天道酬勤, 总有一天会蜕变的"></a>天道酬勤, 总有一天会蜕变的</h3><h3 id="感觉自己好懒啊。2018都快过去了才写了那么一点东西"><a href="#感觉自己好懒啊。2018都快过去了才写了那么一点东西" class="headerlink" title="感觉自己好懒啊。2018都快过去了才写了那么一点东西"></a>感觉自己好懒啊。2018都快过去了才写了那么一点东西</h3><h3 id="卧槽，2019快完了。还没写东西。。。"><a href="#卧槽，2019快完了。还没写东西。。。" class="headerlink" title="卧槽，2019快完了。还没写东西。。。"></a>卧槽，2019快完了。还没写东西。。。</h3><h3 id="2020年过了一半了，成长了很多，却没有记录，有点遗憾"><a href="#2020年过了一半了，成长了很多，却没有记录，有点遗憾" class="headerlink" title="2020年过了一半了，成长了很多，却没有记录，有点遗憾"></a>2020年过了一半了，成长了很多，却没有记录，有点遗憾</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下自己的学习成长路线&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://qxsugar.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://qxsugar.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
